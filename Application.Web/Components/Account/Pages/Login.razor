@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Application.Web.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<AuthenticationWrapper Title="Log in">
    <Subtitle>Not a member? <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="link font-semibold">Create account</a></Subtitle>

    <ChildContent>
        <div class="flex flex-col gap-12">
            <ExternalLoginPicker/>
            <section>
                <StatusMessage Message="@errorMessage"/>
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator/>
                    <h2 class="uppercase text-xl font-black mb-6">Login with email</h2>

                    <div class="mb-8">
                        <ValidationSummary class="flex flex-col gap-1 text-red-400 mb-4 border-l-4 border-red-700 pl-4 py-2" role="alert"/>

                        <InputWrapper For="email" Label="Email" ValidationProperty="() => Input.Email">
                            <InputText id="email" @bind-Value="Input.Email" class="form-input" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                        </InputWrapper>

                        <InputWrapper For="password" Label="Password" ValidationProperty="() => Input.Password">
                            <InputText id="password" type="password" @bind-Value="Input.Password" class="form-input" autocomplete="current-password" aria-required="true" placeholder="password"/>
                        </InputWrapper>

                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                                Remember me
                            </label>
                        </div>

                        <AppButton Label="Log in" />
                    </div>
                    <div class="flex flex-col gap-2">
                        <p>
                            <a href="Account/ForgotPassword">Forgot your password?</a>
                        </p>
                        <p>
                            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                        </p>
                    </div>
                </EditForm>
            </section>
        </div>
    </ChildContent>
</AuthenticationWrapper>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

}
