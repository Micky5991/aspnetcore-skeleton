@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Application.Web.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<AuthenticationWrapper Title="Reset password">
    <Subtitle>Remembered your password? <a href="/Account/Login/" class="font-semibold">Back to login</a></Subtitle>

    <ChildContent>
        <div class="flex flex-col gap-12">
            <StatusMessage Message="@Message"/>
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>

                <input type="hidden" name="Input.Code" value="@Input.Code"/>

                <InputWrapper For="email" Label="Email" ValidationProperty="() => Input.Email">
                    <InputText id="email" @bind-Value="Input.Email" class="form-input" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                </InputWrapper>

                <InputWrapper For="password" Label="Password" ValidationProperty="() => Input.Password">
                    <InputText type="password" @bind-Value="Input.Password" id="password" class="form-input" autocomplete="current-password" aria-required="true" placeholder="password"/>
                </InputWrapper>

                <InputWrapper For="confirm-password" Label="Confirm Password" ValidationProperty="() => Input.ConfirmPassword">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="confirm-password" class="form-input" autocomplete="current-password" aria-required="true" placeholder="password"/>
                </InputWrapper>

                <AppButton Label="Reset password" />
            </EditForm>
        </div>
    </ChildContent>
</AuthenticationWrapper>
<h1>Reset password</h1>
<h2>Reset your password.</h2>
<hr/>
<div class="row">
    <div class="col-md-4">

    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }

}
